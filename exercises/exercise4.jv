pipeline BatteriePipeline {
    transform CelsiusToFahrenheit {
        from tempCelsius oftype decimal;
        to tempFahr oftype decimal;

        tempFahr: (tempCelsius * 9/5) + 32;
    }

    BatterieExtractor -> ZipArchiveInterpreter -> BatterieFilePicker -> BatterieTextFileInterpreter;


    BatterieTextFileInterpreter
        -> BatterieCSVInterpreter
        -> BatterieCoreDataSelector
        -> BatterieColumnDeleter
        -> BatterieSequenceWriter
        -> BatterieTableInterpreter
        -> TemperatureTransformer
        -> Battery_TemperatureTransformer
        -> BatterieLoader;

    block BatterieExtractor oftype HttpExtractor { url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";}

    block ZipArchiveInterpreter oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    block BatterieFilePicker oftype FilePicker{
        path: "/data.csv";
    }

    block BatterieTextFileInterpreter oftype TextFileInterpreter { }

    block BatterieCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block BatterieCoreDataSelector oftype CellRangeSelector {
        select: range A1:J*;
    }

     block BatterieColumnDeleter oftype ColumnDeleter {
        delete: [column F, column G, column H, column I];
    }

    block BatterieSequenceWriter oftype CellWriter {
        at: range A1:F1;
        write: ["id", "producer", "model", "month", "temperature", "battery_temperature"];
    }

    block BatterieTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype validID,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype text,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    block TemperatureTransformer oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        use: CelsiusToFahrenheit;
    }

    block Battery_TemperatureTransformer oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        use: CelsiusToFahrenheit;
    }

    block BatterieLoader oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}

valuetype validID oftype integer {
    constraints: [
        validNumber,
    ];
}

constraint validNumber on integer:
    value > 0;

